/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StatisticsRouteImport } from './routes/statistics'
import { Route as SearchRouteImport } from './routes/search'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as HomeRouteImport } from './routes/home'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as ButtonsRouteImport } from './routes/Buttons'
import { Route as IndexRouteImport } from './routes/index'

const StatisticsRoute = StatisticsRouteImport.update({
  id: '/statistics',
  path: '/statistics',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const ButtonsRoute = ButtonsRouteImport.update({
  id: '/Buttons',
  path: '/Buttons',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/Buttons': typeof ButtonsRoute
  '/admin': typeof AdminRoute
  '/home': typeof HomeRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/search': typeof SearchRoute
  '/statistics': typeof StatisticsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/Buttons': typeof ButtonsRoute
  '/admin': typeof AdminRoute
  '/home': typeof HomeRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/search': typeof SearchRoute
  '/statistics': typeof StatisticsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/Buttons': typeof ButtonsRoute
  '/admin': typeof AdminRoute
  '/home': typeof HomeRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/search': typeof SearchRoute
  '/statistics': typeof StatisticsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/Buttons'
    | '/admin'
    | '/home'
    | '/profile'
    | '/register'
    | '/search'
    | '/statistics'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/Buttons'
    | '/admin'
    | '/home'
    | '/profile'
    | '/register'
    | '/search'
    | '/statistics'
  id:
    | '__root__'
    | '/'
    | '/Buttons'
    | '/admin'
    | '/home'
    | '/profile'
    | '/register'
    | '/search'
    | '/statistics'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ButtonsRoute: typeof ButtonsRoute
  AdminRoute: typeof AdminRoute
  HomeRoute: typeof HomeRoute
  ProfileRoute: typeof ProfileRoute
  RegisterRoute: typeof RegisterRoute
  SearchRoute: typeof SearchRoute
  StatisticsRoute: typeof StatisticsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/statistics': {
      id: '/statistics'
      path: '/statistics'
      fullPath: '/statistics'
      preLoaderRoute: typeof StatisticsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Buttons': {
      id: '/Buttons'
      path: '/Buttons'
      fullPath: '/Buttons'
      preLoaderRoute: typeof ButtonsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ButtonsRoute: ButtonsRoute,
  AdminRoute: AdminRoute,
  HomeRoute: HomeRoute,
  ProfileRoute: ProfileRoute,
  RegisterRoute: RegisterRoute,
  SearchRoute: SearchRoute,
  StatisticsRoute: StatisticsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
